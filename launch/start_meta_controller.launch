<!-- -*- mode: XML -*- -->

<launch>
    <!-- Start Dynamixel controller manager -->
    <!-- 'namespace' is the name of this manager (it has to be a valid ROS graph name). -->
    <!-- 'serial_ports' contains a map of serial ports with all their configuration paramters. -->
    <!--                It is possible to specify multiple ports for a single controller_manager. -->
    <!--                Each port name also has to be a valid ROS graph name. -->
    <!-- Once the controller manager start up it will provide serices to start, stop and restart -->
    <!-- dynamixel controllers, e.g. the manager below with advertise the following: -->
    <!-- 1. /dynamixel_controller_manager/dxl_tty1/start_controller -->
    <!-- 2. /dynamixel_controller_manager/dxl_tty1/stop_controller -->
    <!-- 3. /dynamixel_controller_manager/dxl_tty1/restart_controller -->
    <!-- If the second serial port is uncommented, this manager will provide the same three -->
    <!-- services but with different path, e.g. for the configuration below: -->
    <!-- 4. /dynamixel_controller_manager/dxl_tty2/start_controller -->
    <!-- 5. /dynamixel_controller_manager/dxl_tty2/stop_controller -->
    <!-- 6. /dynamixel_controller_manager/dxl_tty2/restart_controller -->
    <node name="dynamixel_manager" pkg="dynamixel_controllers" type="controller_manager.py" required="true" output="screen">
        <rosparam>
            namespace: dxl_manager
            serial_ports:

            <!--
                bubot_wheels:
                    port_name: "/dev/ttyUSB1"
                    baud_rate: 57600
                    min_motor_id: 0
                    max_motor_id: 25
                    update_rate: 20
            -->    
                bubot_arm:
                    port_name: "/dev/ttyUSB5"
                    baud_rate: 57600
                    min_motor_id: 0
                    max_motor_id: 25
                    update_rate: 20

                bubot_body:
                    port_name: "/dev/ttyUSB2"
                    baud_rate: 57600
                    min_motor_id: 0
                    max_motor_id: 25
                    update_rate: 20
                
        </rosparam>
    </node>


    <rosparam file="$(find bubot_dynamixel)/config/right_arm.yaml" command="load"/>
    <rosparam file="$(find bubot_dynamixel)/config/left_arm.yaml" command="load"/>
    

    <node name="tilt_controller_spawner_arm" pkg="dynamixel_controllers" type="controller_spawner.py"
          args="--manager=dxl_manager
                --port bubot_arm
                right_arm_shoulder_pitch_joint_controller
                right_arm_shoulder_roll_joint_controller
                right_arm_shoulder_yaw_joint_controller
                right_arm_elbow_roll_joint_controller
                right_arm_forearm_yaw_joint_controller
                right_arm_wrist_roll_joint_controller
                right_gripper_joint_controller

                left_arm_shoulder_pitch_joint_controller
                left_arm_shoulder_roll_joint_controller
                left_arm_shoulder_yaw_joint_controller
                left_arm_elbow_roll_joint_controller
                left_arm_forearm_yaw_joint_controller
                left_arm_wrist_roll_joint_controller
                left_gripper_joint_controller

"
          output="screen"/>

    <rosparam file="$(find bubot_dynamixel)/config/tray.yaml" command="load"/>
    <rosparam file="$(find bubot_dynamixel)/config/torso.yaml" command="load"/>
    <rosparam file="$(find bubot_dynamixel)/config/head.yaml" command="load"/>
    
    <node name="tilt_controller_spawner_body" pkg="dynamixel_controllers" type="controller_spawner.py"
          args="--manager=dxl_manager
                --port bubot_body
                
                head_pitch_joint_controller
                head_yaw_joint_controller
                tray_pitch_joint_controller
                torso_yaw_joint_controller
"
          output="screen"/>


</launch>
